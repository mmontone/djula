\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename djula.info
@documentencoding UTF-8
@settitle Djula HTML templating system
@defindex ge
@paragraphindent 0
@finalout
@dircategory Common Lisp
@direntry
* djula: (djula.info). The Djula templating system.
@end direntry

@c %**end of header

@copying
@quotation
Djula HTML templating system 0.2, Oct 21, 2021

Nick Allen

Copyright @copyright{} 2014, Nick Allen.

Maintained by Mariano Montone.

@end quotation

@end copying

@titlepage
@title Djula HTML templating system
@insertcopying
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top Djula HTML templating system
@insertcopying
@end ifnottex

@c %**start of body
@anchor{index doc}@anchor{0}
@c Djula HTML templating system documentation master file, created by
@c sphinx-quickstart on Mon Jul 28 19:47:34 2014.
@c You can adapt this file completely to your liking, but it should at least
@c contain the root `toctree` directive.

Djula is an HTML templating system similar to Django templates for Common Lisp.

Contents:

@menu
* Introduction:: 
* Basics:: 
* Usage:: 
* Variables:: 
* Tags:: 
* Comments:: 
* Verbatim:: 
* Filters:: 
* Templates::
* Internationalization:: 
* Error handling::
* Deployment::
* API: API<3>. 
* Symbol Index::

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Prerequisites:: 
* Installation:: 

Usage

* Auto-reload:: 
* API:: 

Variables

* Default template variables:: 

Tags

* Overview:: 
* List of tags:: 
* Custom tags:: 

List of tags

* block:: 
* extends:: 
* super:: 
* comment:: 
* cycle:: 
* debug:: 
* filter:: 
* firstof:: 
* for:: 
* if:: 
* Boolean operators:: 
* ifchanged:: 
* ifequal:: 
* ifnotequal:: 
* include:: 

Filters

* Overview: Overview<2>. 
* List of filters:: 
* Custom filters:: 

List of filters

* add:: 
* addslashes:: 
* capfirst:: 
* cut:: 
* date:: 
* time:: 
* datetime:: 
* default:: 
* reverse:: 
* divisibleby:: 
* sort:: 
* first:: 
* join:: 
* last:: 
* length:: 
* length_is:: 
* linebreaks:: 
* linebreaksbr:: 
* lower:: 
* make_list:: 
* safe escape: safe escape. 
* slice:: 
* force-escape:: 
* format:: 
* replace … with:: 
* rest:: 
* scan:: 
* time: time<2>. 
* truncatechars:: 
* upper:: 
* urlencode:: 

Templates

* The template package::
* Template inheritance::
* Template includes::

Internationalization

* Syntax:: 
* Tags: Tags<2>. 
* Filters: Filters<2>. 
* Choosing language:: 
* Backends::
* Translate backend::
* Locale backend::
* Gettext backend:: 

Tags

* trans:: 

Filters

* trans: trans<2>. 

Error handling

* API: API<2>. 

@end detailmenu
@end menu

@node Introduction
@anchor{intro doc}@anchor{intro introduction}@anchor{intro welcome-to-djula-html-templating-system-s-documentation}
@chapter Introduction


Djula is an HTML templating system similar to Django templates for Common Lisp.

Djula’s template language is designed to strike a balance between power and
ease. It’s designed to feel comfortable to those used to working with HTML.

@quotation Philosophy 
If you have a background in programming, or if you’re used to languages which mix
programming code directly into HTML, you’ll want to bear in mind that the Djula template
system is not simply Common Lisp code embedded into HTML. This is by design: the template
system is meant to express presentation, not program logic.

The Djula template system provides tags which function similarly to some programming
constructs – an @code{if} tag for boolean tests, a @code{for} tag for looping, etc. – but
these are not simply executed as the corresponding Lisp code, and the template system will
not execute arbitrary Lisp expressions. Only the tags, filters and syntax listed below are
supported by default (although you can add your own extensions to the template language as
needed).
@end quotation

@menu
* Prerequisites:: 
* Installation:: 

@end menu

@node Prerequisites
@anchor{intro prerequisites}
@section Prerequisites


TODO: list of Common Lisp compilers Djula works on.

@node Installation
@anchor{intro installation}
@section Installation


Djula is available on Quicklisp:

@example
(ql:quickload :djula)
@end example

@node Basics
@anchor{basics doc}@anchor{basics basics}
@chapter Basics


A template is simply a text file. It can generate any text-based format (HTML,
XML, CSV, etc.).

A template contains @strong{variables}, which get replaced with values when the
template is evaluated, and @strong{tags}, which control the logic of the template.

Below is a minimal template that illustrates a few basics. Each element will be
explained later in this document.

@example
@{% extends "base.html" %@}

@{% block title %@}@{@{ section.title @}@}@{% endblock %@}

@{% block content %@}
<h1>@{@{ section.title @}@}</h1>

@{% for story in story_list %@}
<h2>
  <a href="@{@{ story.url @}@}">
    @{@{ story.headline|upper @}@}
  </a>
</h2>
<p>@{@{ story.tease|truncatewords:100 @}@}</p>
@{% endfor %@}
@{% endblock %@}
@end example

@node Usage
@anchor{usage doc}@anchor{usage usage}
@chapter Usage

To render our templates, they need be compiled first. We do that with
the @code{COMPILE-TEMPLATE*} function. For inheritance to work, we
need to put all the templates in the same directory so that Djula can
find them when resolving templates inheritance.

Djula looks for templates in the @code{*CURRENT-STORE*}. For our
templates to be found, we have to add the template folder path the
templates store. We can do that with the
@code{ADD-TEMPLATE-DIRECTORY} function.

Here is an example:

@example
(add-template-directory (asdf:system-relative-pathname "webapp" "templates/"))

(defparameter +base.html+ (djula:compile-template* "base.html"))

(defparameter +welcome.html+ (djula:compile-template* "welcome.html"))

(defparameter +contact.html+ (djula:compile-template* "contact.html"))
@end example

Then we can render our compiled templates using the @code{RENDER-TEMPLATE*} function:

@example
(djula:render-template* +welcome.html+ s
                        :title "Ukeleles"
                        :project-name "Ukeleles"
                        :mode "welcome")
@end example

@menu
* Auto-reload:: 
* API:: 

@end menu

@node Auto-reload
@anchor{usage auto-reload}
@section Auto-reload


By default, Djula automatically recompiles the templates when they change.

If you want to disable this, use the @cite{*recompile-templates-on-change*} variable:

@example
(setf djula:*recompile-templates-on-change* nil)
@end example

@node API
@anchor{usage api}
@section API


@geindex add-template-directory (function)
@anchor{usage function djula add-template-directory}
@deffn {Function}  (add@w{-}template@w{-}directorydirectory &optional (template-store *current-store*))

Adds @code{DIRECTORY} to the search path of the @code{TEMPLATE-STORE}
@end deffn

@geindex compile-template (generic)
@anchor{usage generic djula compile-template}
@deffn {Generic Function}  (compile@w{-}templatecompiler name &optional error-p)

Provides a hook to customize template compilation.

@*Specializers: 

@itemize *

@item 
@code{(toplevel-compiler common-lisp:t)}

@item 
@code{(compiler common-lisp:t)}
@end itemize

@end deffn

@geindex compile-template* (function)
@anchor{usage function djula compile-template*}
@deffn {Function}  (compile@w{-}template*name)

Compiles template @code{NAME} with compiler in @emph{CURRENT-COMPILER}
@end deffn

@geindex render-template* (function)
@anchor{usage function djula render-template*}
@deffn {Function}  (render@w{-}template*template &optional stream &rest *template-arguments*)

Render @code{TEMPLATE} into @code{STREAM} passing @emph{TEMPLATE-ARGUMENTS}
@end deffn

@node Variables
@anchor{variables doc}@anchor{variables variables}
@chapter Variables


Variables look like this: @code{@{@{ variable @}@}}. When the template engine
encounters a variable, it evaluates that variable and replaces it with the
result. Variable names consist of any combination of alphanumeric characters
and the underscore (@code{"_"}). The dot (@code{"."}) also appears in variable
sections, although that has a special meaning, as indicated below.
Importantly, @emph{you cannot have spaces or punctuation characters in variable
names.}

Use a dot (@code{.}) to access attributes of a variable.

@cartouche
@quotation Behind the scenes 
For accessing variables the @code{ACCESS} Common Lisp library is used: @indicateurl{https://github.com/AccelerationNet/access}
@end quotation
@end cartouche

In the above example, @code{@{@{ section.title @}@}} will be replaced with the
@code{title} attribute of the @code{section} object.

Note that “bar” in a template expression like @code{@{@{ foo.bar @}@}} will be
interpreted as a literal string and not using the value of the variable “bar”,
if one exists in the template context.

@menu
* Default template variables:: 

@end menu

@node Default template variables
@anchor{variables default-template-variables}
@section Default template variables


You can use the @code{*DEFAULT-TEMPLATE-ARGUMENTS*} variable to store
arguments that will be available for all templates. It is a plist, so
use getf to add arguments, like this:

@example
(setf (getf djula:*default-template-arguments* :foo) 'some-value)
@end example

And now, you can access @code{@{@{ foo @}@}} in your template.

This is useful when you have many templates that rely on the same set
of variables. Use this variable to refactor your code when
appropriate.

Note that you could also write a function that wraps
@code{RENDER-TEMPLATE*} and uses a default list of variables plus
other ones given as arguments:

@example
(defun my-render-template (template stream &rest args)
  (apply #'djula:render-template* template stream (list* :foo 'some-value args)))
@end example

@node Tags
@anchor{tags doc}@anchor{tags tags}
@chapter Tags


@menu
* Overview:: 
* List of tags:: 
* Custom tags:: 

@end menu

@node Overview
@anchor{tags overview}
@section Overview


Tags look like this: @code{@{% tag %@}}. Tags are more complex than variables: Some
create text in the output, some control flow by performing loops or logic, and
some load external information into the template to be used by later variables.

Some tags require beginning and ending tags (i.e. @code{@{% tag %@} ... tag contents
... @{% endtag %@}}).

Here are some of the more commonly used
tags:


@table @asis

@item @code{for}

Loop over each item in an array. For example, to display a list of athletes
provided in @code{athlete-list}:

@example
<ul>
@{% for athlete in athlete-list %@}
    <li>@{@{ athlete.name @}@}</li>
@{% endfor %@}
</ul>
@end example

@item @code{if}, @code{else}

Evaluates a variable, and if that variable is “true” the contents of the
block are displayed:

@example
@{% if athlete-list %@}
    Number of athletes: @{@{ athlete-list|length @}@}
@{% else %@}
    No athletes.
@{% endif %@}
@end example

@item @code{block} and @code{extends}

Set up template inheritance (see below), a powerful way of cutting down on “boilerplate”
in templates.
@end table

@node List of tags
@anchor{tags list-of-tags}
@section List of tags


@menu
* block:: 
* extends:: 
* super:: 
* comment:: 
* cycle:: 
* debug:: 
* filter:: 
* firstof:: 
* for:: 
* if:: 
* Boolean operators:: 
* ifchanged:: 
* ifequal:: 
* ifnotequal:: 
* include:: 

@end menu

@node block
@anchor{tags block}
@subsection block


Defines a block that can be overridden by child templates.

Sample usage:

@example
@{% block stylesheets %@}
   ...
@{% endblock %@}
@end example

@xref{Template inheritance} for more information.

@node extends
@anchor{tags extends}
@subsection extends


Extends a template

Sample usage:

@example
@{% extends "base.html" %@}
@end example

@node super
@anchor{tags super}
@subsection super


Gets the content of the block from the parent template. You can pass the name of the block of the parent block you want to access. If no name is passed, then the current block’s parent is used.

Sample usage:

@example
@{% super "stylesheets" %@}

@{% block stylesheets %@}
  @{% super %@}
@{% endblock %@}
@end example

@node comment
@anchor{tags comment}
@subsection comment


Ignores everything between @code{@{% comment %@}} and @code{@{% endcomment %@}}.
An optional note may be inserted in the first tag. For example, this is
useful when commenting out code for documenting why the code was disabled.

Sample usage:

@example
<p>Rendered text with @{@{ pub-date|date @}@}</p>
@{% comment "Optional note" %@}
    <p>Commented out text with @{@{ create-date|date @}@}</p>
@{% endcomment %@}
@end example

@code{comment} tags cannot be nested.

@node cycle
@anchor{tags cycle}
@subsection cycle


Produces one of its arguments each time this tag is encountered. The first
argument is produced on the first encounter, the second argument on the second
encounter, and so forth. Once all arguments are exhausted, the tag cycles to
the first argument and produces it again.

This tag is particularly useful in a loop:

@example
@{% for o in some-list %@}
    <tr class="@{% cycle "row1" "row2" %@}">
        ...
    </tr>
@{% endfor %@}
@end example

The first iteration produces HTML that refers to class @code{row1}, the second to
@code{row2}, the third to @code{row1} again, and so on for each iteration of the
loop.

You can use variables, too. For example, if you have two template variables,
@code{rowvalue1} and @code{rowvalue2}, you can alternate between their values like
this:

@example
@{% for o in some-list %@}
    <tr class="@{% cycle rowvalue1 rowvalue2 %@}">
        ...
    </tr>
@{% endfor %@}
@end example

@c Variables included in the cycle will be escaped.  You can disable auto-escaping
@c with::
@c 
@c     {% for o in some-list %}
@c         <tr class="{% autoescape off %}{% cycle rowvalue1 rowvalue2 %}{% endautoescape %}
@c             ...
@c         </tr>
@c     {% endfor %}

You can mix variables and strings:

@example
@{% for o in some-list %@}
    <tr class="@{% cycle "row1" rowvalue2 "row3" %@}">
        ...
    </tr>
@{% endfor %@}
@end example

You can use any number of values in a @code{cycle} tag, separated by spaces.
Values enclosed in double quotes (@code{"}) are treated
as string literals, while values without quotes are treated as template
variables.

@node debug
@anchor{tags debug}
@subsection debug


Outputs a whole load of debugging information

@node filter
@anchor{tags filter}
@subsection filter


Filters the contents of the block through one or more filters. Multiple
filters can be specified with pipes and filters can have arguments, just as
in variable syntax.

Note that the block includes @emph{all} the text between the @code{filter} and
@code{endfilter} tags.

Sample usage:

@example
@{% filter force-escape|lower %@}
    This text will be HTML-escaped, and will appear in all lowercase.
@{% endfilter %@}
@end example

@cartouche
@quotation Note 
The >>:tfilter:`escape`<< and >>:tfilter:`safe`<< filters are not acceptable
arguments. Instead, use the @code{autoescape} tag to manage autoescaping
for blocks of template code.
@end quotation
@end cartouche

@node firstof
@anchor{tags firstof}
@subsection firstof


Outputs the first argument variable that is not @code{False}. Outputs nothing if
all the passed variables are @code{False}.

Sample usage:

@example
@{% firstof var1 var2 var3 %@}
@end example

You can also use a literal string as a fallback value in case all
passed variables are False:

@example
@{% firstof var1 var2 var3 "fallback value" %@}
@end example

@c This tag auto-escapes variable values. You can disable auto-escaping with::
@c 
@c     {% autoescape off %}
@c         {% firstof var1 var2 var3 "<strong>fallback value</strong>" %}
@c     {% endautoescape %}
@c 
@c Or if only some variables should be escaped, you can use::
@c 
@c     {% firstof var1 var2|safe var3 "<strong>fallback value</strong>"|safe %}

@node for
@anchor{tags for}
@subsection for


Loops over each item in an array, making the item available in a context
variable. For example, to display a list of athletes provided in
@code{athlete-list}:

@example
<ul>
@{% for athlete in athlete-list %@}
    <li>@{@{ athlete.name @}@}</li>
@{% endfor %@}
</ul>
@end example

If you need to loop over an association list, you can unpack the values
in each sublist into individual variables. For example, if your context
contains a list of (x . y) coordinates called @code{points}, you could use the
following to output the list of points:

@example
@{% for (x . y) in points %@}
    There is a point at @{@{ x @}@},@{@{ y @}@}
@{% endfor %@}
@end example

This can also be useful if you need to access the items in a hash-table.
For example, if your context contained a hash-table named @code{data}, the following
would display the keys and values of the hash-table:

@example
@{% for (key . value) in data.items %@}
    @{@{ key @}@}: @{@{ value @}@}
@{% endfor %@}
@end example

If you need to loop a fixed number of times, you can use the following trick, where @code{data.nb} resolves to an integer:

@example
@{% for _ in data.nb.make-list %@}
   index: @{@{ forloop.counter @}@}
@{% endfor %@}
@end example

The @code{_} is not meaningful, it is only a placeholder for a value that we can’t reuse (it’s nil). See also the @code{djula::iterable-list} generic method.

The for loop sets a number of variables available within the loop:


@multitable {xxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} 
@headitem

Variable

@tab

Description

@item

@code{forloop.counter}

@tab

The current iteration of the loop (1-indexed)

@item

@code{forloop.counter0}

@tab

The current iteration of the loop (0-indexed)

@item

@code{forloop.revcounter}

@tab

The number of iterations from the end of the
loop (1-indexed)

@item

@code{forloop.revcounter0}

@tab

The number of iterations from the end of the
loop (0-indexed)

@item

@code{forloop.first}

@tab

True if this is the first time through the loop

@item

@code{forloop.last}

@tab

True if this is the last time through the loop

@item

@code{forloop.parentloop}

@tab

For nested loops, this is the loop surrounding
the current one

@end multitable


@node if
@anchor{tags if}
@subsection if


The @code{@{% if %@}} tag evaluates a variable, and if that variable is “true” (i.e.
exists, is not empty, and is not a false boolean value) the contents of the
block are output:

@example
@{% if athlete-list %@}
    Number of athletes: @{@{ athlete-list|length @}@}
@{% else %@}
    No athletes.
@{% endif %@}
@end example

In the above, if @code{athlete-list} is not empty, the number of athletes will be
displayed by the @code{@{@{ athlete-list|length @}@}} variable.

For multiple branches, @code{elif} and @code{else} can be used:

@example
@{% if kenny.sick %@}
    Kenny is sick.
@{% elif kenny.dead %@}
    You killed Kenny!  You bastard!!!
@{% else %@}
    Kenny looks okay --- so far
@{% endif %@}
@end example

@node Boolean operators
@anchor{tags boolean-operators}
@subsection Boolean operators


@code{if} tags may use @code{and}, @code{or} or @code{not} to test a number of
variables or to negate a given variable:

@example
@{% if athlete-list and coach-list %@}
    Both athletes and coaches are available.
@{% endif %@}

@{% if not athlete-list %@}
    There are no athletes.
@{% endif %@}

@{% if athlete-list or coach-list %@}
    There are some athletes or some coaches.
@{% endif %@}

@{% if not athlete-list or coach-list %@}
    There are no athletes or there are some coaches (OK, so
    writing English translations of boolean logic sounds
    stupid; it's not our fault).
@{% endif %@}

@{% if athlete-list and not coach-list %@}
    There are some athletes and absolutely no coaches.
@{% endif %@}
@end example

Use of both @code{and} and @code{or} clauses within the same tag is allowed, with
@code{and} having higher precedence than @code{or} e.g.:

@example
@{% if athlete-list and coach-list or cheerleader-list %@}
@end example

will be interpreted like:

@example
(if (or (athlete-list and coach-list) cheerleader-list) ..)
@end example

Use of actual parentheses in the @code{if} tag is invalid syntax. If you need
them to indicate precedence, you should use nested @code{if} tags.

@c :ttag:`if` tags may also use the operators ``==``, ``!=``, ``<``, ``>``,
@c ``<=``, ``>=`` and ``in`` which work as follows:
@c 
@c 
@c ``==`` operator
@c ^^^^^^^^^^^^^^^
@c 
@c Equality. Example::
@c 
@c     {% if somevar == "x" %}
@c       This appears if variable somevar equals the string "x"
@c     {% endif %}
@c 
@c ``!=`` operator
@c ^^^^^^^^^^^^^^^
@c 
@c Inequality. Example::
@c 
@c     {% if somevar != "x" %}
@c       This appears if variable somevar does not equal the string "x",
@c       or if somevar is not found in the context
@c     {% endif %}
@c 
@c ``<`` operator
@c ^^^^^^^^^^^^^^
@c 
@c Less than. Example::
@c 
@c     {% if somevar < 100 %}
@c       This appears if variable somevar is less than 100.
@c     {% endif %}
@c 
@c ``>`` operator
@c ^^^^^^^^^^^^^^
@c 
@c Greater than. Example::
@c 
@c     {% if somevar > 0 %}
@c       This appears if variable somevar is greater than 0.
@c     {% endif %}
@c 
@c ``<=`` operator
@c ^^^^^^^^^^^^^^^
@c 
@c Less than or equal to. Example::
@c 
@c     {% if somevar <= 100 %}
@c       This appears if variable somevar is less than 100 or equal to 100.
@c     {% endif %}
@c 
@c ``>=`` operator
@c ^^^^^^^^^^^^^^^
@c 
@c Greater than or equal to. Example::
@c 
@c     {% if somevar >= 1 %}
@c       This appears if variable somevar is greater than 1 or equal to 1.
@c     {% endif %}
@c 
@c ``in`` operator
@c ^^^^^^^^^^^^^^^
@c 
@c Contained within. This operator is supported by many Python containers to test
@c whether the given value is in the container. The following are some examples
@c of how ``x in y`` will be interpreted::
@c 
@c     {% if "bc" in "abcdef" %}
@c       This appears since "bc" is a substring of "abcdef"
@c     {% endif %}
@c 
@c     {% if "hello" in greetings %}
@c       If greetings is a list or set, one element of which is the string
@c       "hello", this will appear.
@c     {% endif %}
@c 
@c     {% if user in users %}
@c       If users is a QuerySet, this will appear if user is an
@c       instance that belongs to the QuerySet.
@c     {% endif %}
@c 
@c ``not in`` operator
@c ^^^^^^^^^^^^^^^^^^^
@c 
@c Not contained within. This is the negation of the ``in`` operator.
@c 
@c 
@c The comparison operators cannot be 'chained' like in Python or in mathematical
@c notation. For example, instead of using::
@c 
@c     {% if a > b > c %}  (WRONG)
@c 
@c you should use::
@c 
@c     {% if a > b and b > c %}

@c Filters
@c ^^^^^^^
@c 
@c You can also use filters in the :ttag:`if` expression. For example::
@c 
@c     {% if messages|length >= 100 %}
@c        You have lots of messages today!
@c     {% endif %}

@node ifchanged
@anchor{tags ifchanged}
@subsection ifchanged


Check if a value has changed from the last iteration of a loop.

The @code{@{% ifchanged %@}} block tag is used within a loop.

If given one or more variables, check whether any variable has changed.

For example, the following shows the date every time it changes, while
showing the hour if either the hour or the date has changed:

@example
@{% for date in days %@}
    @{% ifchanged date.date %@} @{@{ date.date @}@} @{% endifchanged %@}
    @{% ifchanged date.hour date.date %@}
        @{@{ date.hour @}@}
    @{% endifchanged %@}
@{% endfor %@}
@end example

The @code{ifchanged} tag can also take an optional @code{@{% else %@}} clause that
will be displayed if the value has not changed:

@example
@{% for match in matches %@}
    <div style="background-color:
        @{% ifchanged match.ballot-id %@}
            @{% cycle "red" "blue" %@}
        @{% else %@}
            gray
        @{% endifchanged %@}
    ">@{@{ match @}@}</div>
@{% endfor %@}
@end example

@node ifequal
@anchor{tags ifequal}
@subsection ifequal


Output the contents of the block if the two arguments equal each other.

Example:

@example
@{% ifequal user.pk comment.user-id %@}
    ...
@{% endifequal %@}
@end example

As in the @code{if} tag, an @code{@{% else %@}} clause is optional.

The arguments can be hard-coded strings, so the following is valid:

@example
@{% ifequal user.username "adrian" %@}
    ...
@{% endifequal %@}
@end example

An alternative to the @code{ifequal} tag is to use the @code{if} tag and the
@code{==} operator.

@node ifnotequal
@anchor{tags ifnotequal}
@subsection ifnotequal


Just like @code{ifequal}, except it tests that the two arguments are not
equal.

An alternative to the @code{ifnotequal} tag is to use the @code{if} and
the @code{!=} operator.

@node include
@anchor{tags include}
@subsection include

Loads a template and renders it with the current context. This is a way of
“including” other templates within a template.

The template name can either be a variable or a hard-coded (quoted) string,
in either single or double quotes.

This example includes the contents of the template @code{"foo/bar.html"}:

@example
@{% include "foo/bar.html" %@}
@end example

A set of parameters can also be added, which become available as context
variables when the included template is rendered:

@example
@{% include "user.html" :user record.creator %@}
@{% include "user.html" :user record.updater %@}
@end example

@c .. templatetag:: load
@c 
@c load
@c ^^^^
@c 
@c Loads a custom template tag set.
@c 
@c For example, the following template would load all the tags and filters
@c registered in ``somelibrary`` and ``otherlibrary`` located in package
@c ``package``::
@c 
@c     {% load somelibrary package.otherlibrary %}
@c 
@c You can also selectively load individual filters or tags from a library, using
@c the ``from`` argument. In this example, the template tags/filters named ``foo``
@c and ``bar`` will be loaded from ``somelibrary``::
@c 
@c     {% load foo bar from somelibrary %}
@c 
@c See :doc:`Custom tag and filter libraries </howto/custom-template-tags>` for
@c more information.
@c 
@c .. templatetag:: lorem
@c 
@c lorem
@c ^^^^^
@c 
@c .. versionadded:: 1.8
@c 
@c     The tag was previously located in :mod:`django.contrib.webdesign`.
@c 
@c Displays random "lorem ipsum" Latin text. This is useful for providing sample
@c data in templates.
@c 
@c Usage::
@c 
@c     {% lorem [count] [method] [random] %}
@c 
@c The ``{% lorem %}`` tag can be used with zero, one, two or three arguments.
@c The arguments are:
@c 
@c ===========  =============================================================
@c Argument     Description
@c ===========  =============================================================
@c ``count``    A number (or variable) containing the number of paragraphs or
@c              words to generate (default is 1).
@c ``method``   Either ``w`` for words, ``p`` for HTML paragraphs or ``b``
@c              for plain-text paragraph blocks (default is ``b``).
@c ``random``   The word ``random``, which if given, does not use the common
@c              paragraph ("Lorem ipsum dolor sit amet...") when generating
@c              text.
@c ===========  =============================================================
@c 
@c Examples:
@c 
@c * ``{% lorem %}`` will output the common "lorem ipsum" paragraph.
@c * ``{% lorem 3 p %}`` will output the common "lorem ipsum" paragraph
@c   and two random paragraphs each wrapped in HTML ``<p>`` tags.
@c * ``{% lorem 2 w random %}`` will output two random Latin words.
@c 
@c .. templatetag:: now
@c 
@c now
@c ^^^
@c 
@c Displays the current date and/or time, using a format according to the given
@c string. Such string can contain format specifiers characters as described
@c in the :tfilter:`date` filter section.
@c 
@c Example::
@c 
@c     It is {% now "jS F Y H:i" %}
@c 
@c Note that you can backslash-escape a format string if you want to use the
@c "raw" value. In this example, "f" is backslash-escaped, because otherwise
@c "f" is a format string that displays the time. The "o" doesn't need to be
@c escaped, because it's not a format character::
@c 
@c     It is the {% now "jS o\f F" %}
@c 
@c This would display as "It is the 4th of September".
@c 
@c .. note::
@c 
@c     The format passed can also be one of the predefined ones
@c     :setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`,
@c     :setting:`SHORT_DATE_FORMAT` or :setting:`SHORT_DATETIME_FORMAT`.
@c     The predefined formats may vary depending on the current locale and
@c     if :ref:`format-localization` is enabled, e.g.::
@c 
@c         It is {% now "SHORT_DATETIME_FORMAT" %}

@node Custom tags
@anchor{tags custom-tags}
@section Custom tags


TODO

@node Comments
@anchor{comments doc}@anchor{comments comments}@anchor{comments template-comments}
@chapter Comments


To comment-out part of a line in a template, use the comment syntax: @code{@{# #@}}.

For example, this template would render as @code{'hello'}:

@example
@{# greeting #@}hello
@end example

A comment can contain any template code, invalid or not. For example:

@example
@{# @{% if foo %@}bar@{% else %@} #@}
@end example

If you need to comment out a multiline portion of the template, see the @code{comment} tag.

@node Verbatim
@anchor{verbatim doc}@anchor{verbatim template-verbatim}@anchor{verbatim verbatim}
@chapter Verbatim


If you want to leave some portion of text unprocessed by Djula, use the verbatim syntax: @code{@{$ $@}}.

For example, this template would render as @code{'this is @{@{verbatim@}@}'}:

@example
@{$ this is @{@{verbatim@}@} $@}
@end example

@node Filters
@anchor{filters doc}@anchor{filters filters}
@chapter Filters


@menu
* Overview: Overview<2>. 
* List of filters:: 
* Custom filters:: 

@end menu

@node Overview<2>
@anchor{filters overview}
@section Overview


You can modify variables for display by using @strong{filters}.

Filters look like this: @code{@{@{ name|lower @}@}}. This displays the value of the
@code{@{@{ name @}@}} variable after being filtered through the >>:tfilter:`lower`<<
filter, which converts text to lowercase. Use a pipe (@code{|}) to apply a filter.

Filters can be “chained.” The output of one filter is applied to the next.
@code{@{@{ text|escape|linebreaks @}@}} is a common idiom for escaping text contents,
then converting line breaks to @code{<p>} tags.

Some filters take arguments. A filter argument looks like this: @code{@{@{
bio|truncatewords:30 @}@}}. This will display the first 30 words of the @code{bio}
variable.

Filter arguments that contain spaces must be quoted; for example, to join a
list with commas and spaced you’d use @code{@{@{ list|join:", " @}@}}.

Djula provides about thirty built-in template filters. You can read all about
them in the built-in filter reference.
To give you a taste of what’s available, here are some of the more commonly
used template filters:

@node List of filters
@anchor{filters list-of-filters}
@section List of filters


@menu
* add:: 
* addslashes:: 
* capfirst:: 
* cut:: 
* date:: 
* time:: 
* datetime:: 
* default:: 
* reverse:: 
* divisibleby:: 
* sort:: 
* first:: 
* join:: 
* last:: 
* length:: 
* length_is:: 
* linebreaks:: 
* linebreaksbr:: 
* lower:: 
* make_list:: 
* safe escape: safe escape. 
* slice:: 
* force-escape:: 
* format:: 
* replace … with:: 
* rest:: 
* scan:: 
* time: time<2>. 
* truncatechars:: 
* upper:: 
* urlencode:: 

@end menu

@node add
@anchor{filters add}
@subsection add


Adds the argument to the value.

For example:

@example
@{@{ value|add:2 @}@}
@end example

If @code{value} is @code{4}, then the output will be @code{6}.

@node addslashes
@anchor{filters addslashes}
@subsection addslashes


Adds slashes before quotes. Useful for escaping strings in CSV, for example.

For example:

@example
@{@{ value|addslashes @}@}
@end example

If @code{value} is @code{"I'm using Djula"}, the output will be
@code{"I\'m using Djula"}.

@node capfirst
@anchor{filters capfirst}
@subsection capfirst


Capitalizes the first character of the value. If the first character is not
a letter, this filter has no effect.

For example:

@example
@{@{ value|capfirst @}@}
@end example

If @code{value} is @code{"djula"}, the output will be @code{"Djula"}.

@c center
@c ^^^^^^
@c 
@c Centers the value in a field of a given width.
@c 
@c For example::
@c 
@c     "{{ value|center:"15" }}"
@c 
@c If ``value`` is ``"Djula"``, the output will be ``"     Djula    "``.

@node cut
@anchor{filters cut}
@subsection cut


Removes all values of arg from the given string.

For example:

@example
@{@{ value|cut:" " @}@}
@end example

If @code{value} is @code{"String with spaces"}, the output will be
@code{"Stringwithspaces"}.

@node date
@anchor{filters date}
@subsection date


Formats a date


@table @asis

@item Example::

@{@{ date-today | date @}@}
@end table

A LOCAL-TIME format spec can be provided:

@example
(defvar timestamp 3752179200)
@{@{ timestamp | date:(:year "/" (:month 2) "/" (:day 2)) @}@} ;; shows 2018/11/26
@end example

@node time
@anchor{filters time}
@subsection time


Formats a time

Example:

@example
@{@{ time-now | time @}@}
@end example

@node datetime
@anchor{filters datetime}
@subsection datetime


Formats a date and time

Example:

@example
@{@{ time-now | datetime @}@}
@end example

@node default
@anchor{filters default}
@subsection default


If value evaluates to @code{False}, uses the given default. Otherwise, uses the
value.

For example:

@example
@{@{ value|default "nothing" @}@}
@end example

If @code{value} is @code{""} (the empty string), the output will be @code{nothing}.

@node reverse
@anchor{filters reverse}
@subsection reverse


Takes a list and returns that list reversed.

For example:

@example
@{@{ list | reverse @}@}
@end example

@node divisibleby
@anchor{filters divisibleby}
@subsection divisibleby


Returns @code{True} if the value is divisible by the argument.

For example:

@example
@{@{ value|divisibleby:"3" @}@}
@end example

If @code{value} is @code{21}, the output would be @code{True}.


@node sort
@anchor{filters sort}
@subsection sort


Takes a list and returns that list sorted.

For example:

@example
@{@{ list | sort @}@}
@end example

@node first
@anchor{filters first}
@subsection first


Returns the first item in a list.

For example:

@example
@{@{ value|first @}@}
@end example

If @code{value} is the list @code{("a" "b" "c")}, the output will be @code{"a"}.

@node join
@anchor{filters join}
@subsection join


Joins a list with a string.

For example:

@example
@{@{ value|join:" // " @}@}
@end example

If @code{value} is the list @code{("a" "b" "c")}, the output will be the string
@code{"a // b // c"}.

@node last
@anchor{filters last}
@subsection last


Returns the last item in a list.

For example:

@example
@{@{ value|last @}@}
@end example

If @code{value} is the list @code{("a" "b" "c" "d")}, the output will be the
string @code{"d"}.

@node length
@anchor{filters length}
@subsection length


Returns the length of the value. This works for both strings and lists.

For example:

@example
@{@{ value|length @}@}
@end example

If @code{value} is @code{("a" "b" "c" "d")} or @code{"abcd"}, the output will be
@code{4}.

@node length_is
@anchor{filters length-is}
@subsection length_is


Returns @code{True} if the value’s length is the argument, or @code{False} otherwise.

For example:

@example
@{@{ value|length_is:"4" @}@}
@end example

If @code{value} is @code{['a', 'b', 'c', 'd']} or @code{"abcd"}, the output will be
@code{True}.

@quotation
@end quotation

@node linebreaks
@anchor{filters linebreaks}
@subsection linebreaks


Replaces line breaks in plain text with appropriate HTML; a single
newline becomes an HTML line break (@code{<br />}) and a new line
followed by a blank line becomes a paragraph break (@code{</p>}).

For example:

@example
@{@{ value|linebreaks @}@}
@end example

If @code{value} is @code{Joel\nis a slug}, the output will be @code{<p>Joel<br />is a
slug</p>}.

@node linebreaksbr
@anchor{filters linebreaksbr}
@subsection linebreaksbr


Converts all newlines in a piece of plain text to HTML line breaks
(@code{<br />}).

For example:

@example
@{@{ value|linebreaksbr @}@}
@end example

If @code{value} is @code{Joel\nis a slug}, the output will be @code{Joel<br />is a
slug}.

@c linenumbers
@c ^^^^^^^^^^^
@c 
@c Displays text with line numbers.
@c 
@c For example::
@c 
@c     {{ value|linenumbers }}
@c 
@c If ``value`` is::
@c 
@c     one
@c     two
@c     three
@c 
@c the output will be::
@c 
@c     1. one
@c     2. two
@c     3. three
@c 
@c .. templatefilter:: ljust
@c 
@c ljust
@c ^^^^^
@c 
@c Left-aligns the value in a field of a given width.
@c 
@c **Argument:** field size
@c 
@c For example::
@c 
@c     "{{ value|ljust:"10" }}"
@c 
@c If ``value`` is ``Djula``, the output will be ``"Djula    "``.

@node lower
@anchor{filters lower}
@subsection lower


Converts a string into all lowercase.

For example:

@example
@{@{ value|lower @}@}
@end example

If @code{value} is @code{Still MAD At Yoko}, the output will be
@code{still mad at yoko}.

@node make_list
@anchor{filters make-list}
@subsection make_list


Returns the value turned into a list. For a string, it’s a list of characters.
For an integer, the argument is cast into an unicode string before creating a
list.

For example:

@example
@{@{ value|make_list @}@}
@end example

If @code{value} is the string @code{"Joel"}, the output would be the list
@code{['J', 'o', 'e', 'l']}. If @code{value} is @code{123}, the output will be the
list @code{['1', '2', '3']}.

@c .. templatefilter:: phone2numeric
@c 
@c phone2numeric
@c ^^^^^^^^^^^^^
@c 
@c Converts a phone number (possibly containing letters) to its numerical
@c equivalent.
@c 
@c The input doesn't have to be a valid phone number. This will happily convert
@c any string.
@c 
@c For example::
@c 
@c     {{ value|phone2numeric }}
@c 
@c If ``value`` is ``800-COLLECT``, the output will be ``800-2655328``.
@c 
@c .. templatefilter:: pluralize
@c 
@c pluralize
@c ^^^^^^^^^
@c 
@c Returns a plural suffix if the value is not 1. By default, this suffix is
@c ``'s'``.
@c 
@c Example::
@c 
@c     You have {{ num_messages }} message{{ num_messages|pluralize }}.
@c 
@c If ``num_messages`` is ``1``, the output will be ``You have 1 message.``
@c If ``num_messages`` is ``2``  the output will be ``You have 2 messages.``
@c 
@c For words that require a suffix other than ``'s'``, you can provide an alternate
@c suffix as a parameter to the filter.
@c 
@c Example::
@c 
@c     You have {{ num_walruses }} walrus{{ num_walruses|pluralize:"es" }}.
@c 
@c For words that don't pluralize by simple suffix, you can specify both a
@c singular and plural suffix, separated by a comma.
@c 
@c Example::
@c 
@c     You have {{ num_cherries }} cherr{{ num_cherries|pluralize:"y,ies" }}.
@c 
@c .. note:: Use :ttag:`blocktrans` to pluralize translated strings.
@c 
@c .. templatefilter:: pprint
@c 
@c pprint
@c ^^^^^^
@c 
@c A wrapper around :func:`pprint.pprint` -- for debugging, really.
@c 
@c .. templatefilter:: random
@c 
@c random
@c ^^^^^^
@c 
@c Returns a random item from the given list.
@c 
@c For example::
@c 
@c     {{ value|random }}
@c 
@c If ``value`` is the list ``['a', 'b', 'c', 'd']``, the output could be ``"b"``.
@c 
@c .. templatefilter:: removetags
@c 
@c removetags
@c ^^^^^^^^^^
@c 
@c Removes a space-separated list of [X]HTML tags from the output.
@c 
@c For example::
@c 
@c     {{ value|removetags:"b span"|safe }}
@c 
@c If ``value`` is ``"<b>Joel</b> <button>is</button> a <span>slug</span>"`` the
@c output will be ``"Joel <button>is</button> a slug"``.
@c 
@c Note that this filter is case-sensitive.
@c 
@c If ``value`` is ``"<B>Joel</B> <button>is</button> a <span>slug</span>"`` the
@c output will be ``"<B>Joel</B> <button>is</button> a slug"``.
@c 
@c .. templatefilter:: rjust
@c 
@c rjust
@c ^^^^^
@c 
@c Right-aligns the value in a field of a given width.
@c 
@c **Argument:** field size
@c 
@c For example::
@c 
@c     "{{ value|rjust:"10" }}"
@c 
@c If ``value`` is ``Djula``, the output will be ``"    Djula"``.

@node safe escape
@anchor{filters safe-escape}
@subsection safe, escape


Marks a string as not requiring further HTML escaping prior to output. When
autoescaping is off, this filter has no effect.

@cartouche
@quotation Note 
If you are chaining filters, a filter applied after @code{safe} can
make the contents unsafe again. For example, the following code
prints the variable as is, unescaped:

@example
@{@{ var|safe|escape @}@}
@end example
@end quotation
@end cartouche

@c safeseq
@c ^^^^^^^
@c 
@c Applies the :tfilter:`safe` filter to each element of a sequence. Useful in
@c conjunction with other filters that operate on sequences, such as
@c :tfilter:`join`. For example::
@c 
@c     {{ some_list|safeseq|join:", " }}
@c 
@c You couldn't use the :tfilter:`safe` filter directly in this case, as it would
@c first convert the variable into a string, rather than working with the
@c individual elements of the sequence.

@node slice
@anchor{filters slice}
@subsection slice


Returns a slice of a sequence (i.e. lists, vectors, strings)

Uses the Common Lisp @code{cl-slice} library.

Syntax:

@example
@{@{ seq | slice: slices @}@}
@end example

Each @code{slice} selects a subset of subscripts along the corresponding axis.


@itemize *

@item 
A nonnegative integer selects the corresponding index, while a negative integer selects an index counting backwards from the last index:

@example
@{@{ list | slice: 4 @}@}
@end example
@end itemize

if the list is @code{(1 2 3 4 5 6)} it will output @code{(5)}


@itemize *

@item 
@code{(start . end)} to select a range.  When @code{end} is @code{NIL}, the last index is included.
@end itemize

Each boundary is resolved according to the other rules if applicable, so you can use negative integers:

@example
@{@{ string | slice: (0 . 5) @}@}
@{@{ string | slice: (5 . nil) @}@}
@end example

if the string is @code{"Hello world"} is will output @code{Hello} and @code{world}.

@c slugify
@c ^^^^^^^
@c 
@c Converts to lowercase, removes non-word characters (alphanumerics and
@c underscores) and converts spaces to hyphens. Also strips leading and trailing
@c whitespace.
@c 
@c For example::
@c 
@c     {{ value|slugify }}
@c 
@c If ``value`` is ``"Joel is a slug"``, the output will be ``"joel-is-a-slug"``.

@node force-escape
@anchor{filters force-escape}
@subsection force-escape


Forces escaping HTML characters (@code{<, >, ', \, &}):

@example
@{@{ value | force-escape @}@}
@end example

It calls @code{djula::escape-for-html}.

@node format
@anchor{filters format}
@subsection format


Formats the variable according to the argument, a string formatting specifier.
This specifier uses Common Lisp string formatting syntax

For example:

@example
@{@{ value | format:"~:d" @}@}
@end example

If @code{value} is @code{1000000}, the output will be @code{1,000,000}.

@c striptags
@c ^^^^^^^^^
@c 
@c Makes all possible efforts to strip all [X]HTML tags.
@c 
@c For example::
@c 
@c     {{ value|striptags }}
@c 
@c If ``value`` is ``"<b>Joel</b> <button>is</button> a <span>slug</span>"``, the
@c output will be ``"Joel is a slug"``.
@c 
@c .. admonition:: No safety guarantee
@c 
@c     Note that ``striptags`` doesn't give any guarantee about its output being
@c     entirely HTML safe, particularly with non valid HTML input. So **NEVER**
@c     apply the ``safe`` filter to a ``striptags`` output.
@c     If you are looking for something more robust, you can use the ``bleach``
@c     Python library, notably its `clean`_ method.
@c 
@c .. _clean: http://bleach.readthedocs.org/en/latest/clean.html
@c 
@c .. templatefilter:: replace

@node replace … with
@anchor{filters replace-with}
@subsection replace … with


The @code{replace} and the @code{with} filters work together:

@example
@{@{ value | replace:regexp | with:string @}@}
@end example

This will replace all occurences of the regexp in “value” with a new
string, using @code{ppcre:regex-replace-all}.

@node rest
@anchor{filters rest}
@subsection rest


Returns the @code{rest} of a list (aka @code{cdr}).

For example:

@example
@{@{ values|rest @}@}
@end example

If @code{values} is the list @code{("a" "b" "c")}, the output will be @code{("b" "c")}.

@node scan
@anchor{filters scan}
@subsection scan


Extracts and displays a regexp from the value:

@example
@{@{ value | scan:regexp @}@}
@end example

This will display only the text that matches the regexp (using @code{ppcre:scan-to-strings}).

@node time<2>
@anchor{filters id4}
@subsection time


Formats a time according to the given format.

For example:

@example
@{@{ value | time @}@}
@end example

@c .. templatefilter:: timesince
@c 
@c timesince
@c ^^^^^^^^^
@c 
@c Formats a date as the time since that date (e.g., "4 days, 6 hours").
@c 
@c Takes an optional argument that is a variable containing the date to use as
@c the comparison point (without the argument, the comparison point is *now*).
@c For example, if ``blog_date`` is a date instance representing midnight on 1
@c June 2006, and ``comment_date`` is a date instance for 08:00 on 1 June 2006,
@c then the following would return "8 hours"::
@c 
@c     {{ blog_date|timesince:comment_date }}
@c 
@c Comparing offset-naive and offset-aware datetimes will return an empty string.
@c 
@c Minutes is the smallest unit used, and "0 minutes" will be returned for any
@c date that is in the future relative to the comparison point.
@c 
@c .. templatefilter:: timeuntil
@c 
@c timeuntil
@c ^^^^^^^^^
@c 
@c Similar to ``timesince``, except that it measures the time from now until the
@c given date or datetime. For example, if today is 1 June 2006 and
@c ``conference_date`` is a date instance holding 29 June 2006, then
@c ``{{ conference_date|timeuntil }}`` will return "4 weeks".
@c 
@c Takes an optional argument that is a variable containing the date to use as
@c the comparison point (instead of *now*). If ``from_date`` contains 22 June
@c 2006, then the following will return "1 week"::
@c 
@c     {{ conference_date|timeuntil:from_date }}
@c 
@c Comparing offset-naive and offset-aware datetimes will return an empty string.
@c 
@c Minutes is the smallest unit used, and "0 minutes" will be returned for any
@c date that is in the past relative to the comparison point.
@c 
@c .. templatefilter:: title
@c 
@c title
@c ^^^^^
@c 
@c Converts a string into titlecase by making words start with an uppercase
@c character and the remaining characters lowercase. This tag makes no effort to
@c keep "trivial words" in lowercase.
@c 
@c For example::
@c 
@c     {{ value|title }}
@c 
@c If ``value`` is ``"my FIRST post"``, the output will be ``"My First Post"``.

@node truncatechars
@anchor{filters truncatechars}
@subsection truncatechars


Truncates a string if it is longer than the specified number of characters.
Truncated strings will end with the :cl:symbol:@emph{ELLISION-STRING}, which defaults to “…”.

@strong{Argument:} Number of characters to truncate to

For example:

@example
@{@{ value|truncatechars:9 @}@}
@end example

If @code{value} is @code{"Joel is a slug"}, the output will be @code{"Joel i..."}.

@c truncatechars_html
@c ^^^^^^^^^^^^^^^^^^
@c 
@c .. versionadded:: 1.7
@c 
@c Similar to :tfilter:`truncatechars`, except that it is aware of HTML tags. Any
@c tags that are opened in the string and not closed before the truncation point
@c are closed immediately after the truncation.
@c 
@c For example::
@c 
@c     {{ value|truncatechars_html:9 }}
@c 
@c If ``value`` is ``"<p>Joel is a slug</p>"``, the output will be
@c ``"<p>Joel i...</p>"``.
@c 
@c Newlines in the HTML content will be preserved.
@c 
@c .. templatefilter:: truncatewords
@c 
@c truncatewords
@c ^^^^^^^^^^^^^
@c 
@c Truncates a string after a certain number of words.
@c 
@c **Argument:** Number of words to truncate after
@c 
@c For example::
@c 
@c     {{ value|truncatewords:2 }}
@c 
@c If ``value`` is ``"Joel is a slug"``, the output will be ``"Joel is ..."``.
@c 
@c Newlines within the string will be removed.
@c 
@c .. templatefilter:: truncatewords_html
@c 
@c truncatewords_html
@c ^^^^^^^^^^^^^^^^^^
@c 
@c Similar to :tfilter:`truncatewords`, except that it is aware of HTML tags. Any
@c tags that are opened in the string and not closed before the truncation point,
@c are closed immediately after the truncation.
@c 
@c This is less efficient than :tfilter:`truncatewords`, so should only be used
@c when it is being passed HTML text.
@c 
@c For example::
@c 
@c     {{ value|truncatewords_html:2 }}
@c 
@c If ``value`` is ``"<p>Joel is a slug</p>"``, the output will be
@c ``"<p>Joel is ...</p>"``.
@c 
@c Newlines in the HTML content will be preserved.
@c 
@c .. templatefilter:: unordered_list
@c 
@c unordered_list
@c ^^^^^^^^^^^^^^
@c 
@c Recursively takes a self-nested list and returns an HTML unordered list --
@c WITHOUT opening and closing <ul> tags.
@c 
@c The list is assumed to be in the proper format. For example, if ``var``
@c contains ``['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]``, then
@c ``{{ var|unordered_list }}`` would return::
@c 
@c     <li>States
@c     <ul>
@c             <li>Kansas
@c             <ul>
@c                     <li>Lawrence</li>
@c                     <li>Topeka</li>
@c             </ul>
@c             </li>
@c             <li>Illinois</li>
@c     </ul>
@c     </li>
@c 
@c Note: An older, more restrictive and verbose input format is also supported:
@c ``['States', [['Kansas', [['Lawrence', []], ['Topeka', []]]], ['Illinois', []]]]``,

@node upper
@anchor{filters upper}
@subsection upper


Converts a string into all uppercase.

For example:

@example
@{@{ value|upper @}@}
@end example

If @code{value} is @code{"Joel is a slug"}, the output will be @code{"JOEL IS A SLUG"}.

@node urlencode
@anchor{filters urlencode}
@subsection urlencode


Escapes a value for use in a URL.

For example:

@example
@{@{ value|urlencode @}@}
@end example

If @code{value} is @code{"http://www.example.org/foo?a=b&c=d"}, the output will be
@code{"http%3A//www.example.org/foo%3Fa%3Db%26c%3Dd"}.

An optional argument containing the characters which should not be escaped can
be provided.

If not provided, the ‘/’ character is assumed safe. An empty string can be
provided when @emph{all} characters should be escaped. For example:

@example
@{@{ value|urlencode:"" @}@}
@end example

If @code{value} is @code{"http://www.example.org/"}, the output will be
@code{"http%3A%2F%2Fwww.example.org%2F"}.

@c .. templatefilter:: urlize
@c 
@c urlize
@c ^^^^^^
@c 
@c Converts URLs and email addresses in text into clickable links.
@c 
@c This template tag works on links prefixed with ``http://``, ``https://``, or
@c ``www.``. For example, ``http://goo.gl/aia1t`` will get converted but
@c ``goo.gl/aia1t`` won't.
@c 
@c It also supports domain-only links ending in one of the original top level
@c domains (``.com``, ``.edu``, ``.gov``, ``.int``, ``.mil``, ``.net``, and
@c ``.org``). For example, ``djulaproject.com`` gets converted.
@c 
@c .. versionchanged:: 1.8
@c 
@c     Support for domain-only links that include characters after the top-level
@c     domain (e.g. ``djulaproject.com/`` and ``djulaproject.com/download/``)
@c     was added.
@c 
@c Links can have trailing punctuation (periods, commas, close-parens) and leading
@c punctuation (opening parens), and ``urlize`` will still do the right thing.
@c 
@c Links generated by ``urlize`` have a ``rel="nofollow"`` attribute added
@c to them.
@c 
@c For example::
@c 
@c     {{ value|urlize }}
@c 
@c If ``value`` is ``"Check out www.djulaproject.com"``, the output will be
@c ``"Check out <a href="http://www.djulaproject.com"
@c rel="nofollow">www.djulaproject.com</a>"``.
@c 
@c In addition to web links, ``urlize`` also converts email addresses into
@c ``mailto:`` links. If ``value`` is
@c ``"Send questions to foo@example.com"``, the output will be
@c ``"Send questions to <a href="mailto:foo@example.com">foo@example</a>"``.
@c 
@c The ``urlize`` filter also takes an optional parameter ``autoescape``. If
@c ``autoescape`` is ``True``, the link text and URLs will be escaped using
@c Djula's built-in :tfilter:`escape` filter. The default value for
@c ``autoescape`` is ``True``.
@c 
@c .. note::
@c 
@c     If ``urlize`` is applied to text that already contains HTML markup,
@c     things won't work as expected. Apply this filter only to plain text.
@c 
@c .. templatefilter:: urlizetrunc
@c 
@c urlizetrunc
@c ^^^^^^^^^^^
@c 
@c Converts URLs and email addresses into clickable links just like urlize_, but truncates URLs
@c longer than the given character limit.
@c 
@c **Argument:** Number of characters that link text should be truncated to,
@c including the ellipsis that's added if truncation is necessary.
@c 
@c For example::
@c 
@c     {{ value|urlizetrunc:15 }}
@c 
@c If ``value`` is ``"Check out www.djulaproject.com"``, the output would be
@c ``'Check out <a href="http://www.djulaproject.com"
@c rel="nofollow">www.djulapr...</a>'``.
@c 
@c As with urlize_, this filter should only be applied to plain text.
@c 
@c .. templatefilter:: wordcount
@c 
@c wordcount
@c ^^^^^^^^^
@c 
@c Returns the number of words.
@c 
@c For example::
@c 
@c     {{ value|wordcount }}
@c 
@c If ``value`` is ``"Joel is a slug"``, the output will be ``4``.
@c 
@c .. templatefilter:: wordwrap
@c 
@c wordwrap
@c ^^^^^^^^
@c 
@c Wraps words at specified line length.
@c 
@c **Argument:** number of characters at which to wrap the text
@c 
@c For example::
@c 
@c     {{ value|wordwrap:5 }}
@c 
@c If ``value`` is ``Joel is a slug``, the output would be::
@c 
@c     Joel
@c     is a
@c     slug
@c 
@c .. templatefilter:: yesno
@c 
@c yesno
@c ^^^^^
@c 
@c Maps values for true, false and (optionally) None, to the strings "yes", "no",
@c "maybe", or a custom mapping passed as a comma-separated list, and
@c returns one of those strings according to the value:
@c 
@c For example::
@c 
@c     {{ value|yesno:"yeah,no,maybe" }}
@c 
@c ==========  ======================  ==================================
@c Value       Argument                Outputs
@c ==========  ======================  ==================================
@c ``True``                            ``yes``
@c ``True``    ``"yeah,no,maybe"``     ``yeah``
@c ``False``   ``"yeah,no,maybe"``     ``no``
@c ``None``    ``"yeah,no,maybe"``     ``maybe``
@c ``None``    ``"yeah,no"``           ``"no"`` (converts None to False
@c                                     if no mapping for None is given)
@c ==========  ======================  ==================================

@node Custom filters
@anchor{filters custom-filters}
@section Custom filters


Use the @code{def-filter} macro. Its general form is:

@example
(def-filter :myfilter-name (value arg)
   (body))
@end example

It always takes the variable’s value as argument, and it can have one
required or optional argument. For example, this is how those
built-in filters are defined:

@example
(def-filter :capfirst (val)
  (string-capitalize (princ-to-string val)))
@end example

This is all there is to it. Once written, you can use it in your
templates. You can define a filter wherever you want and there is no
need to register it or to import it in your templates.

Here’s a filter with a required argument:

@example
(def-filter :add (it n)
  (+ it (parse-integer n)))
@end example

and with an optional one:

@example
(def-filter :datetime (it &optional format)
  (let ((timestamp …))))
@end example

When you need to pass a second argument, make your filter return a
lambda function and chain it with the @code{with} filter:

@example
(def-filter :replace (it regex)
   (lambda (replace)
     (ppcre:regex-replace-all regex it replace)))

(def-filter :with (it replace)
   (funcall it replace))
@end example

Now we can write:

@example
@{@{ value | replace:foo | with:bar @}@}
@end example

Errors are handled by the macro, but you can handle them and return a
@code{template-error} condition:

@example
(def-filter :handle-error-filter (it)
   (handler-case
         (do-something)
     (condition (e)
       (template-error "There was an error executing this filter: ~A" e))))
@end example

@node Templates
@chapter Templates

@menu
* The template package::
* Template inheritance::
* Template includes::
@end menu

@node The template package
@section The template package

Templates evaluations occur in @emph{CL-USER} package by default. It is likely that your templates need evaluations to happen in some of your application packages instead. This need typically arises when trying to evaluate @code{ @{@{ object.method @}@} } where @emph{method} is a generic function (accessing slots works fine).

These are the ways to control the template package:

@itemize
@item Globally set @code{*template-package*} to a package of yours.
@item Dynamically bind @code{*template-package*} before rendering the template.
Like:
@example
(let ((djula:*template-package* (find-package :app-package)))
   (djula:render-template* "app-template.html"))
@end example
@item Start your template with a @code{set-package} tag. Note that as of now, this sets the @code{*template-package*} globally, not just for that template. So you may want to make sure to start all of your templates with a @code{set-package} tag to set the correct package for each template.
@end itemize

@node Template inheritance
@anchor{inheritance doc}@anchor{inheritance template-inheritance}
@section Template inheritance


The most powerful – and thus the most complex – part of Djula’s template
engine is template inheritance. Template inheritance allows you to build a base
“skeleton” template that contains all the common elements of your site and
defines @strong{blocks} that child templates can override.

You can also refactor independent template sections in their own file and @strong{include} it in the main template, passing it the required arguments.

It’s easiest to understand template inheritance by starting with an example:

@example
<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="style.css" />
    <title>@{% block title %@}My amazing site@{% endblock %@}</title>
</head>

<body>
    <div id="sidebar">
        @{% block sidebar %@}
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/blog/">Blog</a></li>
        </ul>
        @{% endblock %@}
    </div>

    <div id="content">
        @{% block content %@}@{% endblock %@}
    </div>
</body>
</html>
@end example

This template, which we’ll call @code{base.html}, defines a simple HTML skeleton
document that you might use for a simple two-column page. It’s the job of
“child” templates to fill the empty blocks with content.

In this example, the @code{block} tag defines three blocks that child
templates can fill in. All the @code{block} tag does is to tell the template
engine that a child template may override those portions of the template.

A child template might look like this:

@example
@{% extends "base.html" %@}

@{% block title %@}My amazing blog@{% endblock %@}

@{% block content %@}
@{% for entry in blog_entries %@}
    <h2>@{@{ entry.title @}@}</h2>
    <p>@{@{ entry.body @}@}</p>
@{% endfor %@}
@{% endblock %@}
@end example

The @code{extends} tag is the key here. It tells the template engine that
this template “extends” another template. When the template system evaluates
this template, first it locates the parent – in this case, “base.html”.

At that point, the template engine will notice the three @code{block} tags
in @code{base.html} and replace those blocks with the contents of the child
template. Depending on the value of @code{blog_entries}, the output might look
like:

@example
<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="style.css" />
    <title>My amazing blog</title>
</head>

<body>
    <div id="sidebar">
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/blog/">Blog</a></li>
        </ul>
    </div>

    <div id="content">
        <h2>Entry one</h2>
        <p>This is my first entry.</p>

        <h2>Entry two</h2>
        <p>This is my second entry.</p>
    </div>
</body>
</html>
@end example

Note that since the child template didn’t define the @code{sidebar} block, the
value from the parent template is used instead. Content within a @code{@{% block %@}}
tag in a parent template is always used as a fallback.

You can use as many levels of inheritance as needed. One common way of using
inheritance is the following three-level approach:


@itemize *

@item 
Create a @code{base.html} template that holds the main look-and-feel of your
site.

@item 
Create a @code{base_SECTIONNAME.html} template for each “section” of your
site. For example, @code{base_news.html}, @code{base_sports.html}. These
templates all extend @code{base.html} and include section-specific
styles/design.

@item 
Create individual templates for each type of page, such as a news
article or blog entry. These templates extend the appropriate section
template.
@end itemize

This approach maximizes code reuse and makes it easy to add items to shared
content areas, such as section-wide navigation.

Here are some tips for working with inheritance:


@itemize *

@item 
If you use @code{@{% extends %@}} in a template, it must be the first template
tag in that template. Template inheritance won’t work, otherwise.

@item 
More @code{@{% block %@}} tags in your base templates are better. Remember,
child templates don’t have to define all parent blocks, so you can fill
in reasonable defaults in a number of blocks, then only define the ones
you need later. It’s better to have more hooks than fewer hooks.

@item 
If you find yourself duplicating content in a number of templates, it
probably means you should move that content to a @code{@{% block %@}} in a
parent template.

@item 
If you need to get the content of the block from the parent template,
the @code{@{@{ block.super @}@}} variable will do the trick. This is
useful if you want to add to the contents of a parent block instead of
completely overriding it. Data inserted using @code{@{@{ block.super
@}@}} will not be automatically escaped (see the next section), since
it was already escaped, if necessary, in the parent template.

@item 
For extra readability, you can optionally give a @emph{name} to your
@code{@{% endblock %@}} tag. For example:

@example
@{% block content %@}
...
@{% endblock content %@}
@end example

In larger templates, this technique helps you see which @code{@{% block %@}}
tags are being closed.
@end itemize

Finally, note that you can’t define multiple @code{block} tags with the same
name in the same template. This limitation exists because a block tag works in
“both” directions. That is, a block tag doesn’t just provide a hole to fill –
it also defines the content that fills the hole in the @emph{parent}. If there were
two similarly-named @code{block} tags in a template, that template’s parent
wouldn’t know which one of the blocks’ content to use.

@node Template includes
@anchor{inheritance include}
@section Including other templates


@code{include} loads a template, renders it with the given (optional) variables and inserts its content into the calling template.

For example, we have this first template that renders a list of blog entries:

@example
@{% for entry in blog_entries %@}
    <h2>@{@{ entry.title @}@}</h2>
    <p>@{@{ entry.body @}@}</p>
@{% endfor %@}
@end example

During development, we realize that rendering a blog entry is more
convoluted than first planned, so we want to @strong{refactor} the blog
entry template logic in its own file. And most of all, we plan on
rendering a blog entry on another part of the site, so we want to
@strong{re-use} the rendering logic.

We create a new template in @code{includes/blog-entry.html} and we use the @code{@{% include %@}} template tag, giving it an entry object as argument:

@example
@{% for entry in blog_entries %@}
    @{% include "includes/blog-entry.html" :entry entry %@}
@{% endfor %@}
@end example

See also the @code{ssi} tag for Server-Side Includes.

@node Internationalization
@anchor{internationalization doc}@anchor{internationalization internationalization}
@chapter Internationalization


@menu
* Syntax:: 
* Tags: Tags<2>. 
* Filters: Filters<2>. 
* Choosing language:: 
* Backends::
* Translate backend::
* Locale backend::
* Gettext backend::

@end menu

@node Syntax
@anchor{internationalization syntax}
@section Syntax


The easiest way to translate a string or variable is to enclose it between @code{@{_} and @code{_@}}:

@example
@{_ var _@}
@{_ "hello" _@}
@end example

@node Tags<2>
@anchor{internationalization tags}
@section Tags


@menu
* trans:: 

@end menu

@node trans
@anchor{internationalization trans}
@subsection trans


Translates a variable or string

Example:

@example
@{% trans var %@}
@{% trans "hello" %@}
@end example

@node Filters<2>
@anchor{internationalization filters}
@section Filters


@menu
* trans: trans<2>. 

@end menu

@node trans<2>
@anchor{internationalization id1}
@subsection trans


Translates a variable or string.

For example:

@example
@{@{ var | trans @}@}
@{@{ "my string" |  trans @}@}
@end example

@node Choosing language
@anchor{internationalization choosing-language}
@section Choosing language


To choose the language to use, set the @code{*CURRENT-LANGUAGE*} variable.

For example:

@example
(let ((djula:*current-language* :es))
   (djula:render-template* +translation.html+))
@end example

@node Backends
@anchor{internationalization backends}
@section Backends

Djula supports several backends for doing translations: cl-locale@footnote{https://github.com/arielnetworks/cl-locale}, gettext@footnote{https://github.com/copyleft/gettext}, translate@footnote{https://gitlab.common-lisp.net/dkochmanski/translate}.

For translations to work, one of the translation backend systems need to be loaded and configured. Otherwise @code{translate} function will signal an error.

The ASDF systems are: djula-gettext, djula-locale and djula-translate.

Please have a look at the demo and the documentation of those packages to figure out how to use them.

@node Translate backend
@section Translate backend

TBD

@node Locale backend
@section Locale backend

TBD

@node Gettext backend
@section Gettext backend

@menu
* Gettext message extraction::
* Gettext utilities::

@end menu

@node Gettext message extraction
@subsection Gettext message extraction

For working with @code{gettext} library, messages to be translated first need to be extracted from Djula templates, generate a Lisp file with Gettext entries from it,  and then extracted again from that file with @code{xgettext} library.

Create a Makefile similar to this:

@example
gettext-extract: ## Extract gettext translations from source files
        sbcl --eval '(ql:quickload :my-project)' --eval '(djula::xgettext-templates :my-project-package (asdf:system-relative-pathname :my-project "i18n/xgettext.lisp"))' --quit
        find src -iname "*.lisp" | xargs xgettext --from-code=UTF-8 --keyword=_ --output=i18n/my-project.pot --sort-output

gettext-edit: ## Edit the extracted gettext translations
        msgmerge --update i18n/nb.po i18n/my-project.pot
        xdg-open i18n/nb.po

gettext-compile: ## Compile the edited gettext translations
        msgfmt --output-file=i18n/nb/LC_MESSAGES/ie.mo i18n/nb.po

gettext-init: ## Initialize gettext translations
        msginit --input=i18n/my-project.pot --locale=nb --output=i18n/nb.po
@end example

@code{make gettext-extract} first uses the Lisp compiler to extract translated strings from templates. That generates a Lisp file that can be used with @code{xgettext} command line utility. This Lisp file is basically dead code that should not be loaded into the project, just contains Gettext entries that @code{xgettext} utility can understand. Looks like this:

@example
;; THIS FILE IS AUTOGENERATED. DON'T CHANGE BY HAND. USE XGETTEXT-TEMPLATES FUNCTION.
(INVOICE-ENGINE::GETTEXT "Activity")
(INVOICE-ENGINE::GETTEXT "Address 1")
(INVOICE-ENGINE::GETTEXT "Address 2")
(INVOICE-ENGINE::GETTEXT "Amount")
(INVOICE-ENGINE::GETTEXT "API")
(INVOICE-ENGINE::GETTEXT "Balance")
(INVOICE-ENGINE::GETTEXT "Close")
(INVOICE-ENGINE::GETTEXT "Company")
(INVOICE-ENGINE::GETTEXT "Contact person")
@end example

Then @code{xgettext} can be used to extract the messages from that file.

@node Gettext utilities
@subsection Gettext utilities

Use @code{GETTEXT:PRELOAD-CATALOGS} to inspect current gettext settings:

@example
(gettext:preload-catalogs
   ;; Tell gettext where to find the .mo files
   #.(asdf:system-relative-pathname :my-project "locale/"))

@end example

And that returns Gettext information:

@verbatim
#S(GETTEXT::CATALOG
   :KEY ("fr_fr" :LC_MESSAGES "bookshops")
   :HEADERS ((:PROJECT-ID-VERSION . "PACKAGE VERSION")
             (:REPORT-MSGID-BUGS-TO . "")
             (:PO-REVISION-DATE . "YEAR-MO-DA HO:MI +ZONE")
             (:LAST-TRANSLATOR . "FULL NAME <EMAIL@ADDRESS>")
             (:LANGUAGE-TEAM . "LANGUAGE <LL@li.org>") (:LANGUAGE . "")
             (:MIME-VERSION . "1.0")
             (:CONTENT-TYPE . "text/plain; charset=CHARSET")
             (:CONTENT-TRANSFER-ENCODING . "8bit"))
   :NPLURALS 2
   :PLURALS-FUNCTION #<FUNCTION (LAMBDA (GETTEXT::N)) {542C149B}>
   :MESSAGES (SERAPEUM:DICT
               "Login" '("Se connecter")
               "Password" '("Mot de passe")
               "Please login to continue" '("Veuillez vous identifier pour continuer")
               "Results: ~a. Page: ~a/~a~&" '("Resultats: ~a. Page: ~a/~a~&")
               "Welcome to OpenBookStore" '("Bienvenue dans OpenBookStore")
              ) )

@end verbatim

Run the following function to reload the translations when developing:

@example
(defun reload-translations ()
  ;; Clear gettext's cache
  (clrhash gettext::*catalog-cache*)
  (gettext:preload-catalogs
   ;; Tell gettext where to find the .mo files
   #.(asdf:system-relative-pathname :my-project "locale/")))
@end example

@node Error handling
@anchor{error-handling doc}@anchor{error-handling error-handling}
@chapter Error handling


Djula catches errors and barfs them to the template output by default.

That is controlled via the @code{*CATCH-TEMPLATE-ERRORS-P*} variable.
If changed to @code{NIL}, then errors are not caught anymore and are
debuggable from the lisp listener.

Djula provides more or less verbosity in template errors. Verbosity is
controlled via the variable @code{*VERBOSE-ERRORS-P*}.

Also, there’s a fancy page to display errors, which can be disabled if
desired. That is controlled via the variable @code{*FANCY-ERROR-TEMPLATE-P*}

@menu
* API: API<2>. 

@end menu

@node Deployment
@anchor{deployment doc}@anchor{deployment error-handling}
@chapter Deployment - Building standalone binaries

By default, when asked to compile a template, Djula searches the file
system, in the directories you told it to look into. When you render a
template that @code{extends} or @code{includes} another one, Djula
searches for that one too. Moreover, Djula will try to re-compile a
template at each access, whenever you reload a web page. This is very
convenient for development, it doesn't bother us to deploy our
application from sources (although you may want to disable
auto-reloading), but it prevents us from building a standalone binary
that will run on another machine, when the search path's directories
don't exist anymore.

To build a standalone binary, we will need to:

@itemize *
@item
list all our templates (we can do that in our .asd system declaration)

@item
instantiate @code{djula:*current-store*} as an instance of @code{memory-template-store},

@item
compile our templates: they get compiled into memory.

@item
disable the auto-reload: @code{setf djula:*recompile-templates-on-change* nil)}.

@end itemize

Below is a simple ASDF system declaration that declares two templates
as static files located in the ``src/templates'' directory:

@example lisp
(asdf:defsystem "djula-binary"
  :depends-on (:hunchentoot
               :djula)
  :components ((:module "src"
                        :components
                        ((:file "web")))
               (:module "src/templates"
                        :components
                        ;; Order is important: the ones that extend base.html
                        ;; must be declared after it, because we compile all of them
                        ;; at build time one after the other.
                        ((:static-file "base.html")
                         (:static-file "search.html")))
               (:static-file "README.md"))

  :build-operation "program-op"
  :build-pathname "djula-binary"
  :entry-point "djula-binary::main"

  :description "How to embed Djula templates in a self-contained binary.")
@end example

At the top level of ``src/web.lisp'', we set Djula's store to a memory
store, and we disable the autoreload feature. This code would be
called when we @code{load} the .lisp file, so it will be called when
we create the binary with @code{(asdf:make :djula-binary)}.

@example lisp
(setf djula:*current-store* (make-instance 'djula:memory-template-store
					   :search-path (list (asdf:system-relative-pathname "djula-binary"
                                                             "src/templates/"))) ;; meaningful trailing /
      djula:*recompile-templates-on-change* nil)
@end example

Now, we compile all those declared templates. We use the
@code{djula:list-asdf-system-templates} utility that will return a
list of pathnames to our templates.

@example lisp
(mapcar #'djula:compile-template* (djula:list-asdf-system-templates :demo-djula-in-binaries "src/templates"))
@end example

Finally, you can declare templates as usual in your application:

@example lisp
(defparameter +base.html+ (djula:compile-template* "base.html"))
@end example

and render a template that @code{extends} another one, it will work
(and that was actually the main difficulty: the default store always
looks for this inherited template on the filesystem).

You can now send to your web server your self-contained, one file
binary that you built on your machine or on a CI server.

@quotation Note
For a real-world web application you'll likely need
@url{https://github.com/Shinmera/deploy, Deploy} to ship foreign
libraries in your binary.
@end quotation


@node API<2>
@anchor{error-handling api}
@section API



@deffn {Variable} *catch@w{-}template@w{-}errors@w{-}p*
@end deffn


@deffn {Variable} *fancy@w{-}error@w{-}template@w{-}p*
@end deffn


@deffn {Variable} *verbose@w{-}errors@w{-}p*
@end deffn

@node API<3>
@anchor{api doc}@anchor{api api}
@chapter API


Djula external symbols documentation

@geindex compile-template* (function)
@anchor{api function djula compile-template*}
@deffn {Function}  (compile@w{-}template*name)

Compiles template @code{NAME} with compiler in @emph{CURRENT-COMPILER}
@end deffn

@geindex url-encode (function)
@anchor{api function djula url-encode}
@deffn {Function}  (url@w{-}encodestring)

URL-encodes a string using the external format EXTERNAL-FORMAT.
@end deffn

@geindex *current-store* (variable)
@anchor{api variable djula *current-store*}
@deffn {Variable} *current@w{-}store*

The currently in-use template store.  Defaults to a @code{FILE-STORE}.
@end deffn

@geindex *allow-include-roots* (variable)
@anchor{api variable djula *allow-include-roots*}
@deffn {Variable} *allow@w{-}include@w{-}roots*
@end deffn

@geindex *current-compiler* (variable)
@anchor{api variable djula *current-compiler*}
@deffn {Variable} *current@w{-}compiler*
@end deffn

@geindex *fancy-debug-p* (variable)
@anchor{api variable djula *fancy-debug-p*}
@deffn {Variable} *fancy@w{-}debug@w{-}p*

When enabled, displays fancy html based debugging information for the @{% debug %@} tag
@end deffn

@geindex *template-package* (variable)
@anchor{api variable djula *template-package*}
@deffn {Variable} *djula@w{-}execute@w{-}package*
@end deffn

@geindex fetch-template* (function)
@anchor{api function djula fetch-template*}
@deffn {Function}  (fetch@w{-}template*key)

Return the text of a template fetched from the @emph{CURRENT-STORE}.
@end deffn

@geindex url-encode-path (function)
@anchor{api function djula url-encode-path}
@deffn {Function}  (url@w{-}encode@w{-}pathpath)
@end deffn

@geindex url-decode (function)
@anchor{api function djula url-decode}
@deffn {Function}  (url@w{-}decode)
@end deffn

@geindex def-tag-compiler (macro)
@anchor{api macro djula def-tag-compiler}
@deffn {Macro}  (def@w{-}tag@w{-}compilername args &body body)
@end deffn

@geindex find-template* (function)
@anchor{api function djula find-template*}
@deffn {Function}  (find@w{-}template*name &optional (error-p t))
@end deffn

@geindex *fancy-error-template-p* (variable)
@anchor{api variable djula *fancy-error-template-p*}
@deffn {Variable} *fancy@w{-}error@w{-}template@w{-}p*

When enabled, show a fancy template when an error occurs.
@end deffn

@geindex *default-language* (variable)
@anchor{api variable djula *default-language*}
@deffn {Variable} *default@w{-}language*
@end deffn

@geindex render-template* (function)
@anchor{api function djula render-template*}
@deffn {Function}  (render@w{-}template*template &optional stream &rest *template-arguments*)

Render @code{TEMPLATE} into @code{STREAM} passing @emph{TEMPLATE-ARGUMENTS}
@end deffn

@geindex *default-template-arguments* (variable)
@anchor{api variable djula *default-template-arguments*}
@deffn {Variable} *default@w{-}template@w{-}arguments*
@end deffn

@geindex add-template-directory (function)
@anchor{api function djula add-template-directory}
@deffn {Function}  (add@w{-}template@w{-}directorydirectory &optional (template-store *current-store*))

Adds @code{DIRECTORY} to the search path of the @code{TEMPLATE-STORE}
@end deffn

@geindex *catch-template-errors-p* (variable)
@anchor{api variable djula *catch-template-errors-p*}
@deffn {Variable} *catch@w{-}template@w{-}errors@w{-}p*

When enabled, caught errors during the rendering of the template are written to the output instead of being handled by the lisp listener
@end deffn

@geindex *current-language* (variable)
@anchor{api variable djula *current-language*}
@deffn {Variable} *current@w{-}language*
@end deffn

@geindex *verbose-errors-p* (variable)
@anchor{api variable djula *verbose-errors-p*}
@deffn {Variable} *verbose@w{-}errors@w{-}p*

When enabled, errors are displayed more verbosely. Good for debugging
@end deffn

@node Symbol Index
@unnumbered Symbol Index

@printindex ge

@c %**end of body
@bye
